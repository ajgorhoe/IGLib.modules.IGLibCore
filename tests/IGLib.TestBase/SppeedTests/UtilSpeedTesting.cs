
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using FluentAssertions;
using LearnCs.Lib;

namespace IGLib.Tests
{


    /// <summary>Contains speed testng utilities, mainly as static methods. These usually perform calculations
    /// whose execution is deterministic and take the same number of operations every time, such that execution
    /// times provide some information of how fast the host computer is in comparison with other computers.
    /// <para>Implementation of tests' algorithms can be external or provided by this class. For examle,
    /// <see cref="GeometricSeriesNumerical(int, double, double)"/> provides implementations of numerically
    /// calculating a finite geometric series, which is used in tests like <see cref="StandardSpeedTestGeometricSeries_HpLaptop24(out SpeedTestInfo, bool)"/>.
    /// In this case, analytical calculation of the result for verification is also provided by <see cref="GeometricSeriesAnalytical(int, double, double)"/>.</para>
    /// <para>Standard tests take the same parameters of the underlying algorithms in every execution. 
    /// These parameters are defined as constants in the corresponding sub-classes of the current class.
    /// Beside test parameters, the execution time on a reference machine (or differentt machines) are provided.
    /// For example, class <see cref="ConstGeom"/> provided sonstants for the standard test using
    /// finite geometric series, <see cref="StandardSpeedTestGeometricSeries_HpLaptop24(bool)"/>., and property
    /// <see cref="ConstGeom.RefExecutionsPerSecond_HpLaptop24"/> provides execution time on the machine whose
    /// parameters are stored in <see cref=""/></para>
    /// <para>When largee inputs are required for tests (such as matrices and vectors), the inputs for standard 
    /// tests may be generated by a random generator, but the generator should be seeded with a constant
    /// value, such that inputs are always the same.</para>
    /// <para>Standard tests have a variant where test execution parameters and results are stored in
    /// a <see cref="SpeedTestInfo"/> object (number of executions or iterations, execution time, ID of the
    /// reference machine where reference speed for calculation of speed factor was obtained etc.). The
    /// simplified variant just returns the final speed factor and doesn't provide more detailed information.
    /// Examples are <see cref="StandardSpeedTestGeometricSeries_HpLaptop24(out SpeedTestInfo, bool)"/>
    /// and <see cref="StandardSpeedTestGeometricSeries_HpLaptop24(bool)"/>.</para>
    /// <para>Machines that are used for obtaining reference test results (used in calculation of speed 
    /// factors) have their information listed in subclasses' constants, such as 
    /// <see cref="ConstMachineHpLaptop24"/>.</para>
    /// <para>Classes providing constants should use standard names for those constants that have a 
    /// common meaning across different tests or machines. Beside such constants, standard tests will
    /// also rely on test-specific constants that define parameters of the algorithm, and these will
    /// be named according to usual naminng in the context of specific algorithms (e.g., parameters
    /// specific to geometric series <see cref="ConstGeomBase.a0"/> and  <see cref="ConstGeomBase.k"/>,
    /// while parameters <see cref="ConstGeomBase.NumExecutions"/> and <see cref="ConstGeomBase.Tolerance"/>
    /// are standard accross a number of tests).</para>
    /// <para>Utilities of this class are tested in the "UtilSpeedTestingTests class". Actual speed 
    /// tests are performed in the "SpeedTests" class.</para>
    /// </summary>
    public class UtilSpeedTesting
    {

        /// <summary>Analytically calculates and returns the specified finite  arythmetic series
        /// (from the sequence: a_i = a0 + (i-1) * d).
        /// <para>This is mainly used to verify the results of <see cref="ArithmeticSeriesNumerical(int, double, double)"/>,
        /// which is used for simple speed tests on the host computer.</para></summary>
        /// <param name="n">Number of terms in the series to be summed.</param>
        /// <param name="a0">The first element of the arithmetic sequence.</param>
        /// <param name="d">Difference between successive elements of the sequence (next - current).</param>
        /// <returns>The sum of elements of the sequence, calculated analytically.</returns>
        public static double ArithmeticSeriesAnalytical(int n, double a0, double d)
        {
            return n * ((2 * a0 + (n - 1) * d) / 2);
        }

        /// <summary>Analytically calculates and returns the specified finite arythmetic series
        /// (from the sequence: a_i = a0 + (i-1) * d).
        /// <para>This method is mainly used for simple speed tests on the host computer.</para></summary>
        /// <param name="n">Number of terms in the series to be summed.</param>
        /// <param name="a0">The first element of the arithmetic sequence.</param>
        /// <param name="d">Difference between successive elements of the sequence (next - current).</param>
        /// <returns>Thee sum of elements of the sequence, calculated analytically.</returns>
        public static double ArithmeticSeriesNumerical(int n, double a0, double d)
        {
            double an = a0;
            double Sn = 0;
            for (int i = 0; i < n; i++)
            {
                Sn += an;
                an += d;
            }
            return Sn;
        }



        /// <summary>Analytically calculates and returns the specified finite geometric series
        /// (from the geometric sequence: a_i = a0 * k^(i-1)).
        /// <para>This is mainly used to verify the results of <see cref="GeometricSeriesNumerical(int, double, double)"/>,
        /// which is used for simple speed tests on the host computer.</para></summary>
        /// <param name="n">Number of terms in the series to be summed.</param>
        /// <param name="a0">The first element of the geometric sequence.</param>
        /// <param name="k">Quotient between successive elements of the sequence (next / current).</param>
        /// <returns>The sum of elements of the sequence, calculated analytically.</returns>
        public static double GeometricSeriesAnalytical(int n, double a0, double k)
        {
            if (k == 1)
            {
                return a0 * n;
            }
            return a0 * (1 - Math.Pow(k, n)) / (1 - k);
        }

        /// <summary>Numerically calculates and returns the specified finite geometric series
        /// (from the geometric sequence: a_i = a0 * k^(i-1)).
        /// <para>This method is mainly used for simple speed tests on the host computer.</para></summary>
        /// <param name="n">Number of terms in the series to be summed.</param>
        /// <param name="a0">The first element of the geometric sequence.</param>
        /// <param name="k">Quotient between successive elements of the sequence (next / current).</param>
        /// <returns>Thee sum of elements of the sequence, calculated numerically.</returns>
        public static double GeometricSeriesNumerical(int n, double a0, double k)
        {
            double an = a0;
            double Sn = 0;
            for (int i = 0; i < n; i++)
            {
                Sn += an;
                an *= k;
            }
            return Sn;
        }

        /// <summary>Numerically calculates and returns the specified finite geometric series by 
        /// calculating each term of the series directly, rather than accumulate it during iteration.
        /// (from the geometric sequence: a_i = a0 * k^(i-1)).
        /// <para>This method is mainly used for simple speed tests on the host computer.</para></summary>
        /// <param name="n">Number of terms in the series to be summed.</param>
        /// <param name="a0">The first element of the geometric sequence.</param>
        /// <param name="k">Quotient between successive elements of the sequence (next / current).</param>
        /// <returns>Thee sum of elements of the sequence, calculated numerically.</returns>
        public static double GeometricSeriesNumerical_DirectElementCalculation(int n, double a0, double k)
        {
            double an;
            double Sn = 0;
            for (int i = 0; i < n; i++)
            {
                an = a0 * Math.Pow(k, i);
                Sn += an;
            }
            return Sn;
        }


        // The following reion provide information on reference computers on which reference
        // speed test results were obtained:

        #region ReferenceMachinesInformation

        /// <summary>Ajgor's HP laptop, acquired in 2024.</summary>
        public class ConstMachineHpLaptop24
        {

            /// <summary>Machine's ID</summary>
            public const string MachineId = "HpLaptop24";

            public const string Description = "HP laptop acquired in 2024.";

            // Testing Machine configration:
            public const string MachineConfiguration =
$@"
Processor	12th Gen Intel(R) Core(TM) i5-1235U, 1300 Mhz, 10 Core(s), 12 Logical Processor(s)	
Installed Physical Memory (RAM)	32.0 GB	
OS Name	Microsoft Windows 11 Pro	
Version	10.0.26100 Build 26100	
System Model	HP EliteBook 860 16 inch G9 Notebook PC	
System SKU	6F6K5EA#ABD	
BaseBoard Manufacturer	HP	
BaseBoard Product	8ABB	
BaseBoard Version	KBC Version 20.74.00
ProcessorLink   ";

        }

        #endregion ReferenceMachinesInformation


        // The following region provides parameters for a variety of standard tests, contained in
        // constants wrapped in static subclasses.
        #region StandardTestParameters


        // Standard parameters for the geometric series speed tests:

        /// <summary>Constants for standard tests based on numerical calculation of finite geometric
        /// series.</summary>
        public class ConstGeomBase
        {

            /// <summary>Standard speed tests with finite geometric series - number of iterations performed
            /// (i.e., number of terms in the series).</summary>
            public const int NumExecutions = 100_000;

            /// <summary>Standard speed tests with finite geometric series - starting element of the 
            /// geometric sequence.</summary>
            public const double a0 = 1.0;

            /// <summary>Standard speed tests with finite geometric series - quotient of successive
            /// elements of the geometric sequence (next / current).</summary>
            public const double k = 1.0 - 1e-4;

            /// <summary>Standard speed tests with finite geometric series - tolerance for the discrepancy
            /// between numerically calculated series (which is used in the speed test) and the same
            /// result obtained by the analytic formula.</summary>
            public const double Tolerance = 1.0e-8;
            
            /// <summary>The expected result of the geometric series, calculated by 
            /// <see cref="GeometricSeriesAnalytical(int, double, double)"/>.</summary>
            public static double AnalyticResult { get; } 
                = GeometricSeriesAnalytical(NumExecutions, a0, k);

        }

        public class ConstGeom : ConstGeomBase
        {

            /// <summary>String ID of the corresponding test.</summary>
            public const string TestId = "Standard Finite Geometric Series Test";

            /// <summary>Standard speed test with finite geometric series - average result (in iterations 
            /// per second) measured on the 2024 HP laptop (<see cref="ConstMachineHpLaptop24"/>).</summary>
            public const double RefExecutionsPerSecond_HpLaptop24 = 280e6;

        }

        public class ConstGeomDirect : ConstGeomBase
        {

            /// <summary>String ID of the corresponding test.</summary>
            public const string TestId = "Standard Finite Geometric Series Test with Direct Calculation of Sequence Elements";

            /// <summary>Standard speed test with finite geometric series and with direct calculation of
            /// sequence elements (using <see cref="Math.Pow(double, double)"/>) - average result (in 
            /// iterations per second) measured on the 2024 HP laptop (<see cref="ConstMachineHpLaptop24"/>).</summary>
            public const double RefExecutionsPerSecond_HpLaptop24 = 31.05e6;

        }

        #endregion StandardTestParameters

        // The region below provides implementations of varous standard tests, which can be directly
        // used to obtain comparative indications of performance of different host computers when
        // performing specific kinds od operations under specific conditions.

        #region StandardSpeedTests

        /// <summary>Default value for the parameter specifying whether results of standad speed 
        /// tests are written to <see cref="Console"/>.</summary>
        public const bool DefaultWriteToConsole_StandardTests = true;


        #region StandardSpeedTests_FiniteGeometricSeries

        /// <summary>Performs the standard speed test - calculation of a finite geometric series
        /// with specific parameters, and with reference results from the machine represented by 
        /// <see cref="ConstMachineHpLaptop24"/>.
        /// <para>Standard parameters of the test:</para>
        /// <para>  <see cref="ConstGeom.n"/> - number of iterations performed (elemnts of the geometric 
        /// sequence that are summed).</para>
        /// <para>  <see cref="ConstGeom.a0"/> - first element of the geometric sequence whose elements are summed.</para>
        /// <para>  <see cref="ConstGeom.k"/> - quotient between subsequent elements of the geometric series.</para>
        /// <para>  <see cref="ConstGeom.Tolerance"/> - tolerance, the allowed absolute discrepancy between the 
        /// numeric and analytic reault (if out of tolerance, exception is thrown in the test method).</para></summary>
        /// <param name="info">Reference to a <see cref="SpeedTestInfo"/> object where information about 
        /// the performed test is stored (parameters, IDs, reference result and machine on which it was 
        /// produced, test duration, etc.).</param>
        /// <param name="writeToConsole">Whether results are printed to console. Default is 
        /// <see cref="DefaultWriteToConsole_StandardTests"/>.</param>
        /// <returns>The speed factor - speed relative to the reference machine, <see cref="ConstMachineHpLaptop24"/>.</returns>
        /// <exception cref="InvalidOperationException"></exception>
        public static double StandardSpeedTestGeometricSeries_HpLaptop24(out SpeedTestInfo info,
            bool writeToConsole = DefaultWriteToConsole_StandardTests)
        {
            double a0 = ConstGeom.a0;
            double k = ConstGeom.k;
            info = new(ConstGeom.TestId, ConstMachineHpLaptop24.MachineId);
            info.Parameters.AddRange([("a0", a0), ("k", k)]);
            info.NumExecutions = ConstGeom.NumExecutions    ;
            info.AnalyticalResult = ConstGeom.AnalyticResult;
            info.Tolerance = ConstGeom.Tolerance;
            info.ReferenceExecutionsPerSecond = ConstGeom.RefExecutionsPerSecond_HpLaptop24;
            if (writeToConsole)
            {
                Console.WriteLine($"Performing speed test - numerical calculation of a finite geometric series...");
                Console.WriteLine($"Test ID: {ConstGeom.TestId}");
                Console.WriteLine($"Parameters:");
                Console.WriteLine($"  n:   {info.NumExecutions}         (number of iterations)");
                Console.WriteLine($"  a:   {a0}         (the first element)");
                Console.WriteLine($"  k:   {k}         (quotient of successive elements)");
                Console.WriteLine($"  tol: {info.Tolerance}         (tolerance (max. allowed discrepancy))");
                Console.WriteLine($"  k^n: {Math.Pow(k, info.NumExecutions)}");
            }
            Stopwatch sw = Stopwatch.StartNew();
            try
            {
                info.Result = GeometricSeriesNumerical(info.NumExecutions, a0, k);
            }
            catch (Exception ex)
            {
                info.Exception = ex;
                if (writeToConsole)
                {
                    Console.WriteLine($"Exception {ex.GetType().Name}: \"{ex.Message}\"");
                }
            }
            finally
            {
                sw.Stop();
            }
            // Store results of the speed test:
            info.ExecutionTimeSeconds = sw.Elapsed.TotalSeconds;
            if (writeToConsole)
            {
                Console.WriteLine($"Numerical result:  S = {info.Result}");
                Console.WriteLine($"Analytical result: S = {info.AnalyticalResult}");
                Console.WriteLine($"  Difference: {info.Result - info.AnalyticalResult}, tolerance: {info.Tolerance}");
            }
            // Verification - numerical result needs to be correct within the specified tolerance:
            if (Math.Abs(info.Result - info.AnalyticalResult) > info.Tolerance)
            {
                if (writeToConsole)
                {
                    Console.WriteLine("WARNING: Diecrepancy between the numerical and analytical result is not within tolerance; exception is being thrown.");
                    throw new InvalidOperationException("Discrepancy between numerical and analytical result is not within tolerance.");
                }
            }
            if (writeToConsole)
            {
                Console.WriteLine("");
                Console.WriteLine($"Geometric series with {info.NumExecutions} terms was calculated in {info.ExecutionTimeSeconds} s.");
                Console.WriteLine($"  Calculations per second: {info.NumExecutionsPerSecond}");
                Console.WriteLine($"  Millions  per second:    {info.MegaExecutionsPerSecond}");
                Console.WriteLine($"  Speed factor:            {info.SpeedFactor}");
            }
            return info.SpeedFactor;
        }

        /// <summary>Similar as <see cref="StandardSpeedTestGeometricSeries_HpLaptop24(out SpeedTestInfo, bool)"/>, which it
        /// calls to do the job, except that it dos not store test information and results, but only retuns the final
        /// speed factor calculated.</summary>
        /// <param name="writeToConsole">Whether information about test execution (parameters and results)
        /// are written to <see cref="Console"/>.</param>
        /// <returns>The speed factor obtained by the test, i.e., the ratio between the numbers of iterations
        /// per second performed in the current test execution, divided by the average obtained on the 
        /// reference machine.</returns>
        public static double StandardSpeedTestGeometricSeries_HpLaptop24(bool writeToConsole = true)
        {
            SpeedTestInfo testInfo;
            return StandardSpeedTestGeometricSeries_HpLaptop24(out testInfo, writeToConsole);
        }



        /// <summary>Performs the standard speed test - calculation of a finite geometric series
        /// with specific parameters, with direct calculation of elements of geometric sequence, and 
        /// with reference results from the machine represented by <see cref="ConstMachineHpLaptop24"/>.
        /// <para>This speed test is almost identical to <see cref="StandardSpeedTestGeometricSeries_HpLaptop24(out SpeedTestInfo, bool)"/>,
        /// except that elements of the geometric </para>
        /// </summary>
        public static double StandardSpeedTestGeometricSeries_DirectElementCalculation_HpLaptop24(out SpeedTestInfo info,
            bool writeToConsole = DefaultWriteToConsole_StandardTests)
        {
            double a0 = ConstGeomDirect.a0;
            double k = ConstGeomDirect.k;
            info = new(ConstGeomDirect.TestId, ConstMachineHpLaptop24.MachineId);
            info.Parameters.AddRange([("a0", a0), ("k", k)]);
            info.NumExecutions = ConstGeomDirect.NumExecutions;
            info.AnalyticalResult = ConstGeomDirect.AnalyticResult;
            info.Tolerance = ConstGeomDirect.Tolerance;
            info.ReferenceExecutionsPerSecond = ConstGeomDirect.RefExecutionsPerSecond_HpLaptop24;
            if (writeToConsole)
            {
                Console.WriteLine($"Performing speed test - numerical calculation of a finite geometric series\n  with direct calculation of elements...");
                Console.WriteLine($"Test ID: {ConstGeomDirect.TestId}");
                Console.WriteLine($"Parameters:");
                Console.WriteLine($"  n:   {info.NumExecutions}         (number of iterations)");
                Console.WriteLine($"  a:   {a0}         (the first element)");
                Console.WriteLine($"  k:   {k}         (quotient of successive elements)");
                Console.WriteLine($"  tol: {info.Tolerance}         (tolerance (max. allowed discrepancy))");
                Console.WriteLine($"  k^n: {Math.Pow(k, info.NumExecutions)}");
            }
            Stopwatch sw = Stopwatch.StartNew();
            try
            {
                info.Result = GeometricSeriesNumerical_DirectElementCalculation(info.NumExecutions, a0, k);
            }
            catch (Exception ex)
            {
                info.Exception = ex;
                if (writeToConsole)
                {
                    Console.WriteLine($"Exception {ex.GetType().Name}: \"{ex.Message}\"");
                }
            }
            finally
            {
                sw.Stop();
            }

            // Store results of the speed test:
            info.ExecutionTimeSeconds = sw.Elapsed.TotalSeconds;
            if (writeToConsole)
            {
                Console.WriteLine($"Numerical result:  S = {info.Result}");
                Console.WriteLine($"Analytical result: S = {info.AnalyticalResult}");
                Console.WriteLine($"  Difference: {info.Result - info.AnalyticalResult}, tolerance: {info.Tolerance}");
            }
            // Verification - numerical result needs to be correct within the specified tolerance:
            if (Math.Abs(info.Result - info.AnalyticalResult) > info.Tolerance)
            {
                if (writeToConsole)
                {
                    Console.WriteLine("WARNING: Diecrepancy between the numerical and analytical result is not within tolerance; exception is being thrown.");
                    throw new InvalidOperationException("Discrepancy between numerical and analytical result is not within tolerance.");
                }
            }
            if (writeToConsole)
            {
                Console.WriteLine("");
                Console.WriteLine($"Geometric series with {info.NumExecutions} terms was calculated in {info.ExecutionTimeSeconds} s.");
                Console.WriteLine($"  Calculations per second: {info.NumExecutionsPerSecond}");
                Console.WriteLine($"  Millions  per second:    {info.MegaExecutionsPerSecond}");
                Console.WriteLine($"  Speed factor:            {info.SpeedFactor}");
            }
            return info.SpeedFactor;
        }

        /// <summary>Similar as <see cref="StandardSpeedTestGeometricSeries_HpLaptop24(out SpeedTestInfo, bool)"/>, which it
        /// calls to do the job, except that it dos not store test information and results, but only retuns the final
        /// speed factor calculated.</summary>
        /// <param name="writeToConsole">Whether information about test execution (parameters and results)
        /// are written to <see cref="Console"/>.</param>
        /// <returns>The speed factor obtained by the test, i.e., the ratio between the numbers of iterations
        /// per second performed in the current test execution, divided by the average obtained on the 
        /// reference machine.</returns>
        public static double StandardSpeedTestGeometricSeries_DirectElementCalculation_HpLaptop24(bool writeToConsole = true)
        {
            SpeedTestInfo testInfo;
            return StandardSpeedTestGeometricSeries_DirectElementCalculation_HpLaptop24(out testInfo, writeToConsole);
        }




        #endregion StandardSpeedTests_FiniteGeometricSeries


        #endregion StandardSpeedTests


    }

}

