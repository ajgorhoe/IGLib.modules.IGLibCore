using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace IG.Lib
{


    /// <summary>Utility class for generaton of unique IDs for objects of specific type.
    /// IDs generated by calls of GetNewId() from a specific object of this class are unique.
    /// Utilizes definition of IIdentifiable interface.
    /// Implementation notes:
    /// In every class whose instances should have unique IDs, instantiate a private static object of this type,
    /// and an instance member of the Proxy subtype of this class. Both objexts should be instantiated by
    /// appropriate initializers, and constructor of the proxy object should be called with static object
    /// as argument.
    /// Example implementation can be found in the ExampleInterfaceImplementation subclass
    /// of this class.</summary>
    public class IdGenerator : ILockable
    {


        #region Construction

        /// <summary>Creates a new ID generator. The first ID generated will be 0.
        /// Subsequent IDs are generated by obtained by incrementing the last generated ID.</summary>
        public IdGenerator() { }

        /// <summary>Created a new ID generator with the specified ID generated first. 
        /// Subsequent IDs are generated by obtained by incrementing the last generated ID.</summary>
        /// <param name="firstId">The first ID generated by the current object.</param>
        public IdGenerator(int firstId)
        { _currentId = firstId; }

        #endregion Construction

        #region ThreadLocking

        private object _mainLock = new object();

        /// <summary>This object's central lock object to be used by other object.
        /// Do not use this object for locking in class' methods, for this you should use 
        /// InternalLock.</summary>
        public object Lock { get { return _mainLock; } }

        #endregion ThreadLocking


        private int _currentId = 0;

        private object _lockId = new object();

        /// <summary>Returns a new unique command ID 
        /// (process-unique over all objects of this type and its subtypes).</summary>
        public int GetNewId()
        { lock (_lockId) { int ret = _currentId; ++_currentId; return ret; } }

    } // class IdGenerator



}
